{"version":3,"sources":["Components/Link.js","Components/SearchBox.js","Components/Card.js","Components/Cardlist.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Link","props","className","SearchBox","searchfield","searchChange","type","placeholder","onChange","Card","name","email","id","alt","src","Cardlist","robots","map","user","i","key","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","filteredRobots","filter","robot","toLowerCase","includes","length","fetch","then","response","json","users","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAWeA,G,MATF,SAACC,GACb,OACC,yBAAKC,UAAU,uBACb,0DACA,kECSWC,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,yBAAKH,UAAU,OACd,2BACYA,UAAU,mCACnBI,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCIDI,EAXF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC3B,OACC,yBAAKV,UAAU,uDACd,yBAAKW,IAAI,SAASC,IAAG,+BAA0BF,EAA1B,cACpB,6BACD,4BAAKF,GACL,2BAAIC,MCgBQI,EArBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAIlB,OACE,6BAEEA,EAAOC,KAAI,SAACC,EAAMC,GACpB,OACA,kBAAC,EAAD,CACAC,IAAKD,EACLP,GAAII,EAAOG,GAAGP,GACdF,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCPLU,EAPA,SAACpB,GACf,OACC,yBAAKqB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACpExB,EAAMyB,WCiBMC,E,kDAnBd,WAAY1B,GAAQ,IAAD,8BAClB,cAAMA,IACD2B,MAAQ,CACZC,UAAU,GAHO,E,8DAODC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACN,0DAEDG,KAAK/B,MAAMyB,a,GAhBQQ,aC+CbC,E,kDAzCb,aAAe,IAAD,8BACZ,gBAOFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAC7B,YAAYiC,EAAMC,OAAOC,SAPxC,EAAKX,MAAQ,CACTZ,OAAQ,GACRZ,YAAa,IAJL,E,qDAWL,IAAD,OACDY,EAAUgB,KAAKJ,MAAfZ,OACDwB,EAAiBxB,EAAOyB,QAAO,SAAAC,GACjC,OAAOA,EAAMhC,KAAKiC,cAAcC,SAAS,EAAKhB,MAAMxB,YAAYuC,kBAElE,OAAQ3B,EAAO6B,OAIX,yBAAK3C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWG,aAAc2B,KAAKI,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUpB,OAAQwB,MAGpB,kBAAC,EAAD,OAXJ,yC,0CAgBiB,IAAD,OAClBM,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKjB,SAAS,CAACjB,OAAQkC,W,GArC1BhB,aCKEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.98ee56cb.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Link = (props) => {\r\n\treturn (\r\n\t\t<div className='f3 tc bg-light-blue'> \r\n\t\t  <h4>concept by: Andrea Neagoie</h4>\r\n\t\t  <h4>customized by: Mannawar Hussain</h4>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Link;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n               className='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t   type='search' \r\n\t\t\t   placeholder='search robots'\r\n\t\t\t   onChange={searchChange} \r\n\t\t\t />\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t  <div>\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{email}</p>\r\n\t\t  </div>\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({robots}) => {\r\n\tif (false) {\r\n\t\tthrow new Error(\"NOOOOOO\");\r\n\t}\r\n\treturn(\r\n\t  <div>\r\n\t  \t{\r\n\t\t  \trobots.map((user, i) =>{\r\n\t\t\treturn ( \r\n\t\t\t<Card \r\n\t\t\tkey={i} \r\n\t\t\tid={robots[i].id} \r\n\t\t\tname={robots[i].name} \r\n\t\t\temail={robots[i].email}\r\n\t\t/>\r\n\t\t  );\r\n\t\t  })\r\n\t\t}\t\r\n      </div>\r\n\t);\r\n}\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'Scroll', border: '5px Solid black', height: '500px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t)\r\n}\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({hasError: true})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.hasError) {\r\n\t\t\treturn <h1> Oooops. This is not good </h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport './App.css';\nimport Link from '../Components/Link';\nimport SearchBox from '../Components/SearchBox';\nimport Cardlist from '../Components/Cardlist';\nimport Scroll from '../Components/Scroll';\nimport ErrorBoundary from '../Components/ErrorBoundary';\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n        robots: [],\n        searchfield: ''\n    }\n  }\n\n  onSearchChange = (event) => {\n    this.setState({searchfield:event.target.value})\n  }\n render() {\n  const {robots} = this.state;\n  const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n    })\n    return !robots.length? \n      <h1>Loading</h1>:\n\n      (\n        <div className='tc'>\n          <h1 className='f1'>Robofriends</h1>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <Scroll>\n          <ErrorBoundary>\n            <Cardlist robots={filteredRobots}/>\n          </ErrorBoundary>\n          </Scroll>\n          <Link />\n        </div>\n      );\n\n }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({robots: users}));   \n  }\n\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}